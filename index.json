[{"content":"1、NeRF的缺陷 隐式表达在空间表达上效率不高(存在大量空白区域)，导致训练速度较慢 隐式表达无法充分利用成熟光栅化加速，导致渲染速度较慢 隐式的表达方式，后续的编辑/动画等操作比较困难 2、Prerequisites 2.1、Splatting Points 传统点云(point-based rendering)基于离散的点进行渲染合成，由于点云分布的离散随机性，渲染结果中孔洞、锯齿等问题。通过将点云替换为可splatting(图形学中splatting代表基于透明度的不同纹理融合技术)的基本点结构单元(例如带透明的圆/椭圆/球)等，可以获得高质量等点云渲染效果。\n物体表面任意点的计算公式为：\n$$f_c(u) = \\sum_{k \\in N}w_kr_k(u-u_k)$$\n2.2、Point-based alpha-blending vs. NeRF-style volumetric rendering 2.2.1、Point-based alpha-blending 基于上述公式，实际计算过程中任意像素位置的颜色，通过覆盖该像素点的N个排序后的点(盘/环/球)在当前像素点处采样颜色，并基于其不透明度加权融合计算得到：\n$$C=\\sum_{i \\in N}\\alpha_ic_i\\prod_j^{i-1}(1-\\alpha_j) \\qquad (1)$$\n其中：$c_i, \\alpha_i$分别表示各Splatting Points在该像素点位置处的颜色以及不透明度。\n2.2.2、NeRF-style volumetric rendering NeRF中的体渲染沿单条光线路径积分计算公式为：\n$$C=\\sum_{i=1}^{N}T_i(1-exp(-\\sigma_i\\delta_i))c_i \\quad with \\quad T_i=\\sum_{j=1}^{i-1}exp(-\\sigma_j\\delta_j)=exp(-\\sum_j^{N-1}\\sigma_j\\delta_j)$$\n其中，\n$T_i$：传输方程(Transmittance)，描述了光从采样点/段$\\delta_i$到达相机时未被遮挡的概率； $1-exp(-\\delta_i\\sigma_i)$：当前采样点/段$\\delta_i$的不透明度; $(1-exp(-\\delta_i\\sigma_i))c_i$：该采样点/段的颜色及强度。积分/求和公式表示了沿光线路径上的各不同颜色强度的采样点/段以不同的传输概率在相机位置融合的最终颜色 令$\\alpha_i = 1-exp(-\\delta_i\\sigma_i)$表示当前采样点/段的不透明度，则上述公式可表示为：\n$$C=\\sum_{i=1}^{N}T_i\\alpha_ic_i \\quad with \\quad T_i=\\prod_j^{i-1}(1-\\alpha_j) \\qquad (2)$$\n2.2.3、区别和联系： 由公式(1)和(2)可以看出，两种渲染方式共享相同的计算公式，但：\n在典型的Point-based渲染中，不透明度通常通过对学习到的2D Gaussian的采样计算得到； 在NeRF-like的体渲染中，不透明度则通过沿光线采样，并通过网络计算采样点属性再积分得到。 2.3、3D Gaussian primitive 使用3D高斯单元可以兼容可微分体渲染，实现较好的渲染效果，而且利用其无结构的显式表达方式，实现快速的渲染。一个用于点云渲染的典型3D高斯单元包含如下几个属性：\n位置(x, y, z)：描述了高斯单元的坐标 协方差(3X3矩阵)：描述了高斯单元在三个轴向方向的拉伸缩方尺度。当高斯单元各轴与对应坐标轴线平行时，协方差退化为对角线矩阵。 颜色(RGB)：高斯单元的颜色 不透明度(alpha)：高斯单元的不透明程度 3D高斯单元的几何结构描述为：\n$$G(x) = exp(-\\frac{x^T\\Sigma^{-1}{x}}{2})$$\n其均值即为高斯单元的坐标。3D高斯单元最终投影到2D屏幕空间进行渲染。给定相机视角矩阵W，3D高斯单元的2D投影是2D高斯单元，其协方差矩阵为：\n$$\\Sigma^{\u0026rsquo;} = JW\\Sigma{W^T}J^T$$\n其中$J$是透视投影放射近似的Jacobian矩阵。该投影2D高斯单元的方差去掉第三行和第三列元素后，即退化为3D空间中带法线椭面单元的2D投影单元(同样是2D高斯单元)。由于协方差矩阵需要保持半正定性，导致实际优化变得复杂。因此实际过程中，通常将协方差矩阵等效为旋转矩阵$R$和缩放矩阵$S$的组合：\n$$\\Sigma= RSS^TR^T$$\n分别通过三维向量s和四元素q独立表达缩放和旋转。\n以四元素q为例，通过求导链式法则，计算其对2D投影单元的协方差矩阵的梯度计算公式：\n$$\\frac{d\\Sigma^{\u0026rsquo;}}{dq}=\\frac{d\\Sigma^{\u0026rsquo;}}{d\\Sigma} \\frac{d\\Sigma}{dq} \\quad (3)$$\n定义$U=JW，\\Sigma^{\u0026rsquo;}=U\\Sigma U^T$，考虑到:\n$$\\sigma^{\u0026rsquo;}_{ij} = U_{i, *} \\Sigma U_{*,j}^{T} = \\Sigma_{st} U_{is} \\sigma_{st} U_{tj}^{T}$$\n则有:\n$$\\frac{\\partial \\sigma^{\u0026rsquo;}_{ij}}{\\partial \\sigma_{st}} = U_{is}U_{tj}^{T}=U_{is}U_{jt}$$\n重新整理下标则可得到：\n$$\\frac{\\partial \\Sigma^{\u0026rsquo;}}{\\partial \\Sigma_{ij}} =\\left[ \\begin{array}{lll} U_{1,i}U_{1,j} \u0026amp; U_{1,i}U_{2,j} \\\\ U_{1,i}U_{2,j} \u0026amp; U_{2,i}U_{2,j} \\\\ \\end{array} \\right] \\quad (4)$$\n定义$M=RS，\\Sigma=MM^T$，则：\n$$\\frac{d\\Sigma}{dq}=\\frac{d\\Sigma}{dM} \\frac{d M}{dq}=2M\\frac{dM}{dq} \\quad (5)$$\n$$R(q) =\\left[ \\begin{array}{lll} 1/2-(q^2_j+q^2_k) \u0026amp; (q_iq_j - q_rq_k) \u0026amp; (q_iq_k+q_rq_j) \\\\ (q_iq_j+q_rq_k) \u0026amp; 1/2-(q^2_i+q^2_k) \u0026amp; (q_jq_k-q_rq_i) \\\\ (q_iq_k-q_rq_j) \u0026amp; (q_jq_k+q_rq_j) \u0026amp; 1/2-(q^2_i+q^2_j) \\\\ \\end{array} \\right]$$\n到缩放矩阵为对角线矩阵，则可得：\n$$\\frac{\\partial M}{\\partial q_r} =\\left[ \\begin{array}{lll} 0 \u0026amp; -s_yq_k \u0026amp; s_zq_j \\\\ s_xq_k \u0026amp; 0 \u0026amp; -s_zq_i) \\\\ -s_xq_j \u0026amp; s_yq_j \u0026amp; 0 \\\\ \\end{array} \\right] \\quad (6)$$\n同理可计算其它几个分量。将公式(3)~(6)组合即可得到2D投影椭圆协方差矩阵关于旋转矩阵的梯度计算公式\n2.4、球谐光照(Spherical Harmonics) 2.4.1 球谐函数 球谐光照是一种对光照的简化：对于空间上的一点，受到的光照在各个方向上是不同的，也即各向异性，所以空间上一点如果要完全还原光照情况，那就需要记录周围球面上所有方向的光照。球谐函数的主要作用就是用简单的系数表示复杂的球面函数，用于描述光照的分布情况。\n对于任何函数$f(x)$，采用球谐函数展开如下：\n$$f(x) =\\sum_{l=0}^{\\infty}\\sum_{m=-l}^{m=l}c_l^mY_l^m(x)$$\n$$Y_l^m=\\left[ \\begin{aligned} \\sqrt{2}K_l^mcos(m\\phi)P_l^m(cos\\theta) \u0026amp; \u0026amp;(m\u0026gt;0) \\\\ \\sqrt{2}K_l^msin(-m\\phi)P_l^{-m}(cos\\theta) \u0026amp; \u0026amp; (m\u0026lt;0) \\\\ K_l^0P_l^0 \u0026amp; \u0026amp; (m=0)\\\\ \\end{aligned} \\right] $$\n其中$Y_l^m$为球谐基函数(在球面坐标系下的定义),$c_l^m$为球谐基系数。$l \\in N$是球谐函数的“次数”，$m \\in [-l, l]$是球谐函数的“阶数”。$K_l^m、P_l^m$分别为与归一化有关的球谐系数缩放因子和勒让德多项式。引入勒让德多项式，保证了球谐基函数的正交性。\n前几阶的球谐基函数公式定义如下所示：\n各球谐基函数可视化效果(将取值作为离原点的距离，颜色区分取值的正负符号进行网格化)如下所示：\n在已知$f(x)$函数或通过蒙托卡罗方法可计算的情况下，球谐基系数$c_l^m$可通过球面投影积分计算得到：\n$$c_l^m =\\int_{\\Omega}f(w)Y_l^m(w)dw$$\n2.4.2 图形渲染的应用 在图形学中，球谐函数通常用来记录某个值在球面上的分布，比如光照情况或颜色分布等。某球谐函数在球坐标系定义为𝑟=𝑓(𝜃,𝜙)，如果𝑟表示了该函数在(𝜃,𝜙)方向上离坐标原点的距离，则其几何结构如左图所示；如果𝑟表示在图形学中一个球体上的高光亮度，则渲染效果如右图所示。\n球谐函数还可用于记录空间中某个点从不同方向看过去的不同颜色，这在点云渲染中非常有用。3DGS就是用球谐函数记录空间中的Gaussian点在不同方向的颜色。实际应用中的球谐函数基函数一般只用到二阶或三阶。 二阶是4个系数，拓展到rgb，每个颜色通道一个系数，就是4 * 3 = 12个系数。 三阶是9个系数，拓展到rgb就是9 * 3 = 27个系数。\n在使用3DGS等技术重建场景过程中，预先并不知道光照分布(即函数$f(x)$)，无法直接得到球谐系数，通常通过网络估计或者优化算法优化得到。在选定球谐阶数后即可确定所要使用的基函数。给定(观察相机)视角方向$(𝜃,𝜙)$，即可计算得到各基函数取值$y_i$，再与学习得到的球谐函数系数$c_i$，点积计算即可得到该点在该观察方向上的最终颜色：\n$$C= \\sum_i c_iy_i$$\n3、3DGS整体框架 3.1、算法框架流程 算法以多张静态场景图片为输入，输出描述场景的密集3D高斯单元集合。每个高斯单元包含描述位置的坐标、描述大小和朝向的协方差、描述颜色的SH球谐系数，以及不透明度等属性组成。通过最小化场景中3D高斯单元的基于点云不透明度混合渲染图和真实图片之间的差异，迭代不断优化每个高斯单元的属性，以及场景中高斯单元的分布密度。整个算法流程图如下所示：\n首先需要对给定的多张静态场景图片进行预处理，获得每张图片在同一个坐标系的相机拍摄位姿。可以使用SfM算法，例如COLMAP等计算。此外，在估计相机位姿的同时，可获得场景的稀疏点云表达，用于初始化场景的3D高斯单元。\n3.2、初始化 以COLMAP的点云初始化场景的3D高斯单元集合。具体的，将点云归一化到单位体空间。在每个点云处，以当前点云坐标为均值，与其最邻近三个点云之间的(三个坐标轴方向)距离均值为协方差构造每个3D高斯单元。点云颜色则用于初始化SH0阶系数。\n3.3、迭代优化 采用随机梯度法优化3D高斯单元的各属性以及密度分布，以最小化渲染图和输入图片。此外增加渲染图和输入图的结构相似约束。最终的优化目标函数为：\n$$L=(1-\\lambda)L_1+\\lambda L_{D-SSIM}$$\n在待优化的属性中，各3D高斯单元的空间位置分布以及大小(协方差)对场景的精细程度表达有重要作用。最常见的两种情况包括：\n欠重构(under-reconstruction)：空间中存在场景几何结构，但未被3D高斯单元充分覆盖，导致该区域出现空白，没有场景结构表达 过重建(over-reconstruction): 尺寸过大的少量3D高斯单元覆盖较小的场景几何结构，导致该几何结构只能由少量高斯单元确定，缺少丰富细节 当上述两种情况下出现时，其2D投影高斯单元在屏幕空间的位置梯度值通常较大(该区域重建效果较差，优化算法试图将周围高斯单元移动到正确的位置)，可在优化过程中通过位置梯度值大小来判定两种情况，并分别进行如下处理：\n欠重构区域，可直接复制该区域已有的较小3D高斯单元来增加/密化3D高斯分布。具体的，复制相同尺寸的高斯单元，并将其分布到上述位置梯度方向的区域，填补空白区域。此外，根据需要适当增加高斯单元集合体积之和以及高斯单元的个数。\n过重建区域，需要将过大的3D高斯单元细分为较小的3D高斯单元。具体的，通过两个尺寸为原较大高斯单元1/1.6的较小高斯单元替换原较大高斯单元。并将原高斯单元作为PDF分布进行采样来获得两个较小尺寸高斯单元的位置。此情况下保持整个高斯单元集合的体积不变，只是增加了高斯单元的个数。\n上述高斯单元集合致密化过程每隔100步的优化迭代后执行一次。\n除了增加3D高斯单元密度外，也需要对不符合要求的单元进行剔除。不符合的单元类型以及剔除操作方式为：\n任何透明度低于指定阈值的高斯单元。在每次致密化(即每隔100步优化)后执行剔除操作 靠近相机前的3D高斯单元，该类型单元聚集会导致的floater瑕疵现象。具体操作为：在每3000次优化迭代后将所有高斯单元设置为接近于透明，再重新进行3D高斯单元透明度优化。由于接近相机的3D高斯单元的透明度在后续迭代中更新较少，会转化为第一种类型的不合格单元，在后续的透明阈值过滤中被剔除。 在3D空间中尺寸过大，或其2D投影尺寸过大的3D高斯单元直接周期性被剔除 整个优化计算流程如下所示：\n3.4、光栅化渲染 针对现有基于点云的alpha-blending渲染算法中需要固定3D高斯单元数目，以及逐像素不透明度排序导致效率低下问题，提出了基于分片的3D高斯单元光栅化渲染，用于近似基于点云的不透明度融合渲染。具体步骤包括：\n3.4.1、基于视锥的剔除 剔除视锥外的3D高斯单元。具体的，只保留位于视锥内99%体积的3D高斯单元。此外，太靠近裁剪面和太远离远裁剪面的高斯单元的2D投影计算不稳定，也需要进行剔除。\n3.4.2、逐tile(分片)排序和渲染 基于分片的渲染示意图如下所示：\n其具体步骤分为：\n第一步：将投影屏幕切分为16x16的分片，并计算每个3D高斯单元的2D投影椭圆单元所覆盖的分片的个数以及索引号\n第二步：组合3D高斯单元在相机视图空间的深度值和其覆盖的分片索引号为该3D高斯单元的全局索引，具体的，使用64bit的变量描述，其低32bit编码深度值，高32bit编码分片索引。全局索引中包含深度值描述了3D高斯单元在空间中离相机的距离，而覆盖的分片数量则描述了3D高斯单元对渲染图像颜色的贡献程度。\n第三步：基于全局索引对所有的高斯单元进行排序后，再构造逐分片的列表，存储了其2D投影覆盖该分片的，经过depth排序的3D高斯单元序列。\n第四步：为每个分片分配一个CUDA线程块(thread block)，并提前将第三步中的高斯单元序列存储到线程块的局部共享存储空间。为分片中每个像素分配一个线程thread，对该分片的3D高斯排序单元由近到远遍历(相对相机位置)，计算累积颜色和不透明度值。\n第五步：对每个像素，如果第四步中累积的不透明度大于指定阈值，则终止该像素线程的计算。每隔指定时间间隔，查询该分片中所有线程的终止状态。如果所有线程都终止，则结束当前分片的计算。\n第六步：在反向梯度计算过程中，需要记录参与融合计算每个像素颜色的所有3D高斯单元在该像素位置处投影点的属性值，从而对参与计算的3D高斯单元属性参数进行更新。由于传输方程中远处点依赖近处点不透明度信息(相对相机位置)，为了方便梯度计算(链式法则从最外围的复合函数开始)，需要从远到近(相对相机位置)进行遍历计算。可直接利用第四步中已经构建的由近到远的排序列表反向即时计算即可，从而避免为每个像素预先存储投影点排序列表。\n第七步：从分片中最远的3D高斯单元逐步向较近的高斯单元遍历。针对每个像素，只有当前遍历时刻的高斯单元(存储在该分片维护的高斯单元排序列表中，第四步)离相机位置小于其自身最远的高斯单元(存储在该像素维护的高斯单元排序列表中，第六步)，才进行该像素的覆盖计算(是否在当前遍历的高斯单元投影中)，并计算梯度更新该高斯单元。通过存储第四步中的累积不透明度，并除以当前时刻的投影点的不透明度，可得从当前点到最近点的累积不透明度，用于不透明度的反向梯度计算(需要用到近处的不透明累积信息)。\n基于分片排序的渲染方法无需逐像素的排序渲染，是alpha-blending融合渲染的一种近似。当3D高斯单元的2D投影与像素尺寸相当时，这种近似所带来的误差可以忽略不计。此外，由于无需限制需要参与梯度更新的3D高斯单元，因此可以表达较复杂和较大纵深的场景，并且无需针对不同场景进行超惨调节(e.g., 参与梯度计算3D高斯单元个数)\n4、其它优化细节 4.1、Warm-up优化 为了改善优化的稳定性，初期阶段在1/4低分辨率图像上进行warm-up优化。在250次以及500次迭代时刻，在分别提高分辨率一倍。\n4.2、SH渐进优化 由于SH系数的优化对视线角度比较敏感。初期较大误差的视线角度可能导致无法获得较好的SH优化结果。通过在初期只优化SH0系数，后续每隔1000步迭代，分别增加高阶SH系数参与优化，提升优化稳定性\n","permalink":"https://soaroc.github.io/blogs/3dgs/","summary":"针对Gaussian Splatting原论文相关细节的介绍.","title":"Gaussian Splatting"},{"content":"3DGS简介 1、NeRF的缺陷 隐式表达在空间表达上效率不高(存在大量空白区域)，导致训练速度较慢 隐式表达无法充分利用成熟光栅化加速，导致渲染速度较慢 隐式的表达方式，后续的编辑/动画等操作比较困难 2、Prerequisites 2.1、Splatting Points 传统点云(point-based rendering)基于离散的点进行渲染合成，由于点云分布的离散随机性，渲染结果中孔洞、锯齿等问题。通过将点云替换为可splatting(图形学中splatting代表基于透明度的不同纹理融合技术)的基本点结构单元(例如带透明的圆/椭圆/球)等，可以获得高质量等点云渲染效果。\n物体表面任意点的计算公式为：\n$$f_c(u) = \\sum_{k \\in N}w_kr_k(u-u_k)$$\n2.2、Point-based alpha-blending vs. NeRF-style volumetric rendering 2.2.1、Point-based alpha-blending 基于上述公式，实际计算过程中任意像素位置的颜色，通过覆盖该像素点的N个排序后的点(盘/环/球)在当前像素点处采样颜色，并基于其不透明度加权融合计算得到：\n$$C=\\sum_{i \\in N}\\alpha_ic_i\\prod_j^{i-1}(1-\\alpha_j) \\qquad (1)$$\n其中：$c_i, \\alpha_i$分别表示各Splatting Points在该像素点位置处的颜色以及不透明度。\n2.2.2、NeRF-style volumetric rendering NeRF中的体渲染沿单条光线路径积分计算公式为：\n$$C=\\sum_{i=1}^{N}T_i(1-exp(-\\sigma_i\\delta_i))c_i \\quad with \\quad T_i=\\sum_{j=1}^{i-1}exp(-\\sigma_j\\delta_j)=exp(-\\sum_j^{N-1}\\sigma_j\\delta_j)$$\n其中，\n$T_i$：传输方程(Transmittance)，描述了光从采样点/段$\\delta_i$到达相机时未被遮挡的概率； $1-exp(-\\delta_i\\sigma_i)$：当前采样点/段$\\delta_i$的不透明度; $(1-exp(-\\delta_i\\sigma_i))c_i$：该采样点/段的颜色及强度。积分/求和公式表示了沿光线路径上的各不同颜色强度的采样点/段以不同的传输概率在相机位置融合的最终颜色 令$\\alpha_i = 1-exp(-\\delta_i\\sigma_i)$表示当前采样点/段的不透明度，则上述公式可表示为：\n$$C=\\sum_{i=1}^{N}T_i\\alpha_ic_i \\quad with \\quad T_i=\\prod_j^{i-1}(1-\\alpha_j) \\qquad (2)$$\n2.2.3、区别和联系： 由公式(1)和(2)可以看出，两种渲染方式共享相同的计算公式，但：\n在典型的Point-based渲染中，不透明度通常通过对学习到的2D Gaussian的采样计算得到； 在NeRF-like的体渲染中，不透明度则通过沿光线采样，并通过网络计算采样点属性再积分得到。 2.3、3D Gaussian primitive 使用3D高斯单元可以兼容可微分体渲染，实现较好的渲染效果，而且利用其无结构的显式表达方式，实现快速的渲染。一个用于点云渲染的典型3D高斯单元包含如下几个属性：\n位置(x, y, z)：描述了高斯单元的坐标 协方差(3X3矩阵)：描述了高斯单元在三个轴向方向的拉伸缩方尺度。当高斯单元各轴与对应坐标轴线平行时，协方差退化为对角线矩阵。 颜色(RGB)：高斯单元的颜色 不透明度(alpha)：高斯单元的不透明程度 3D高斯单元的几何结构描述为：\n$$G(x) = exp(-\\frac{x^T\\Sigma^{-1}{x}}{2})$$\n其均值即为高斯单元的坐标。3D高斯单元最终投影到2D屏幕空间进行渲染。给定相机视角矩阵W，3D高斯单元的2D投影是2D高斯单元，其协方差矩阵为：\n$$\\Sigma^{\u0026rsquo;} = JW\\Sigma{W^T}J^T$$\n其中$J$是透视投影放射近似的Jacobian矩阵。该投影2D高斯单元的方差去掉第三行和第三列元素后，即退化为3D空间中带法线椭面单元的2D投影单元(同样是2D高斯单元)。由于协方差矩阵需要保持半正定性，导致实际优化变得复杂。因此实际过程中，通常将协方差矩阵等效为旋转矩阵$R$和缩放矩阵$S$的组合：\n$$\\Sigma= RSS^TR^T$$\n分别通过三维向量s和四元素q独立表达缩放和旋转。\n以四元素q为例，通过求导链式法则，计算其对2D投影单元的协方差矩阵的梯度计算公式：\n$$\\frac{d\\Sigma^{\u0026rsquo;}}{dq}=\\frac{d\\Sigma^{\u0026rsquo;}}{d\\Sigma} \\frac{d\\Sigma}{dq} \\quad (3)$$\n定义$U=JW，\\Sigma^{\u0026rsquo;}=U\\Sigma U^T$，考虑到:\n$$\\sigma^{\u0026rsquo;}_{ij} = U_{i, *} \\Sigma U_{*,j}^{T} = \\Sigma_{st} U_{is} \\sigma_{st} U_{tj}^{T}$$\n则有:\n$$\\frac{\\partial \\sigma^{\u0026rsquo;}_{ij}}{\\partial \\sigma_{st}} = U_{is}U_{tj}^{T}=U_{is}U_{jt}$$\n重新整理下标则可得到：\n$$\\frac{\\partial \\Sigma^{\u0026rsquo;}}{\\partial \\Sigma_{ij}} =\\left[ \\begin{array}{lll} U_{1,i}U_{1,j} \u0026amp; U_{1,i}U_{2,j} \\\\ U_{1,i}U_{2,j} \u0026amp; U_{2,i}U_{2,j} \\\\ \\end{array} \\right] \\quad (4)$$\n定义$M=RS，\\Sigma=MM^T$，则：\n$$\\frac{d\\Sigma}{dq}=\\frac{d\\Sigma}{dM} \\frac{d M}{dq}=2M\\frac{dM}{dq} \\quad (5)$$\n$$R(q) =\\left[ \\begin{array}{lll} 1/2-(q^2_j+q^2_k) \u0026amp; (q_iq_j - q_rq_k) \u0026amp; (q_iq_k+q_rq_j) \\\\ (q_iq_j+q_rq_k) \u0026amp; 1/2-(q^2_i+q^2_k) \u0026amp; (q_jq_k-q_rq_i) \\\\ (q_iq_k-q_rq_j) \u0026amp; (q_jq_k+q_rq_j) \u0026amp; 1/2-(q^2_i+q^2_j) \\\\ \\end{array} \\right]$$\n到缩放矩阵为对角线矩阵，则可得：\n$$\\frac{\\partial M}{\\partial q_r} =\\left[ \\begin{array}{lll} 0 \u0026amp; -s_yq_k \u0026amp; s_zq_j \\\\ s_xq_k \u0026amp; 0 \u0026amp; -s_zq_i) \\\\ -s_xq_j \u0026amp; s_yq_j \u0026amp; 0 \\\\ \\end{array} \\right] \\quad (6)$$\n同理可计算其它几个分量。将公式(3)~(6)组合即可得到2D投影椭圆协方差矩阵关于旋转矩阵的梯度计算公式\n2.4、球谐光照(Spherical Harmonics) 2.4.1 球谐函数 球谐光照是一种对光照的简化：对于空间上的一点，受到的光照在各个方向上是不同的，也即各向异性，所以空间上一点如果要完全还原光照情况，那就需要记录周围球面上所有方向的光照。球谐函数的主要作用就是用简单的系数表示复杂的球面函数，用于描述光照的分布情况。\n对于任何函数$f(x)$，采用球谐函数展开如下：\n$$f(x) =\\sum_{l=0}^{\\infty}\\sum_{m=-l}^{m=l}c_l^mY_l^m(x)$$\n$$Y_l^m=\\left[ \\begin{aligned} \\sqrt{2}K_l^mcos(m\\phi)P_l^m(cos\\theta) \u0026amp; \u0026amp;(m\u0026gt;0) \\\\ \\sqrt{2}K_l^msin(-m\\phi)P_l^{-m}(cos\\theta) \u0026amp; \u0026amp; (m\u0026lt;0) \\\\ K_l^0P_l^0 \u0026amp; \u0026amp; (m=0)\\\\ \\end{aligned} \\right] $$\n其中$Y_l^m$为球谐基函数(在球面坐标系下的定义),$c_l^m$为球谐基系数。$l \\in N$是球谐函数的“次数”，$m \\in [-l, l]$是球谐函数的“阶数”。$K_l^m、P_l^m$分别为与归一化有关的球谐系数缩放因子和勒让德多项式。引入勒让德多项式，保证了球谐基函数的正交性。\n前几阶的球谐基函数公式定义如下所示：\n各球谐基函数可视化效果(将取值作为离原点的距离，颜色区分取值的正负符号进行网格化)如下所示：\n在已知$f(x)$函数或通过蒙托卡罗方法可计算的情况下，球谐基系数$c_l^m$可通过球面投影积分计算得到：\n$$c_l^m =\\int_{\\Omega}f(w)Y_l^m(w)dw$$\n2.4.2 图形渲染的应用 在图形学中，球谐函数通常用来记录某个值在球面上的分布，比如光照情况或颜色分布等。某球谐函数在球坐标系定义为𝑟=𝑓(𝜃,𝜙)，如果𝑟表示了该函数在(𝜃,𝜙)方向上离坐标原点的距离，则其几何结构如左图所示；如果𝑟表示在图形学中一个球体上的高光亮度，则渲染效果如右图所示。\n球谐函数还可用于记录空间中某个点从不同方向看过去的不同颜色，这在点云渲染中非常有用。3DGS就是用球谐函数记录空间中的Gaussian点在不同方向的颜色。实际应用中的球谐函数基函数一般只用到二阶或三阶。 二阶是4个系数，拓展到rgb，每个颜色通道一个系数，就是4 * 3 = 12个系数。 三阶是9个系数，拓展到rgb就是9 * 3 = 27个系数。\n在使用3DGS等技术重建场景过程中，预先并不知道光照分布(即函数$f(x)$)，无法直接得到球谐系数，通常通过网络估计或者优化算法优化得到。在选定球谐阶数后即可确定所要使用的基函数。给定(观察相机)视角方向$(𝜃,𝜙)$，即可计算得到各基函数取值$y_i$，再与学习得到的球谐函数系数$c_i$，点积计算即可得到该点在该观察方向上的最终颜色：\n$$C= \\sum_i c_iy_i$$\n3、3DGS整体框架 3.1、算法框架流程 算法以多张静态场景图片为输入，输出描述场景的密集3D高斯单元集合。每个高斯单元包含描述位置的坐标、描述大小和朝向的协方差、描述颜色的SH球谐系数，以及不透明度等属性组成。通过最小化场景中3D高斯单元的基于点云不透明度混合渲染图和真实图片之间的差异，迭代不断优化每个高斯单元的属性，以及场景中高斯单元的分布密度。整个算法流程图如下所示：\n首先需要对给定的多张静态场景图片进行预处理，获得每张图片在同一个坐标系的相机拍摄位姿。可以使用SfM算法，例如COLMAP等计算。此外，在估计相机位姿的同时，可获得场景的稀疏点云表达，用于初始化场景的3D高斯单元。\n3.2、初始化 以COLMAP的点云初始化场景的3D高斯单元集合。具体的，将点云归一化到单位体空间。在每个点云处，以当前点云坐标为均值，与其最邻近三个点云之间的(三个坐标轴方向)距离均值为协方差构造每个3D高斯单元。点云颜色则用于初始化SH0阶系数。\n3.3、迭代优化 采用随机梯度法优化3D高斯单元的各属性以及密度分布，以最小化渲染图和输入图片。此外增加渲染图和输入图的结构相似约束。最终的优化目标函数为：\n$$L=(1-\\lambda)L_1+\\lambda L_{D-SSIM}$$\n在待优化的属性中，各3D高斯单元的空间位置分布以及大小(协方差)对场景的精细程度表达有重要作用。最常见的两种情况包括：\n欠重构(under-reconstruction)：空间中存在场景几何结构，但未被3D高斯单元充分覆盖，导致该区域出现空白，没有场景结构表达 过重建(over-reconstruction): 尺寸过大的少量3D高斯单元覆盖较小的场景几何结构，导致该几何结构只能由少量高斯单元确定，缺少丰富细节 当上述两种情况下出现时，其2D投影高斯单元在屏幕空间的位置梯度值通常较大(该区域重建效果较差，优化算法试图将周围高斯单元移动到正确的位置)，可在优化过程中通过位置梯度值大小来判定两种情况，并分别进行如下处理：\n欠重构区域，可直接复制该区域已有的较小3D高斯单元来增加/密化3D高斯分布。具体的，复制相同尺寸的高斯单元，并将其分布到上述位置梯度方向的区域，填补空白区域。此外，根据需要适当增加高斯单元集合体积之和以及高斯单元的个数。\n过重建区域，需要将过大的3D高斯单元细分为较小的3D高斯单元。具体的，通过两个尺寸为原较大高斯单元1/1.6的较小高斯单元替换原较大高斯单元。并将原高斯单元作为PDF分布进行采样来获得两个较小尺寸高斯单元的位置。此情况下保持整个高斯单元集合的体积不变，只是增加了高斯单元的个数。\n上述高斯单元集合致密化过程每隔100步的优化迭代后执行一次。\n除了增加3D高斯单元密度外，也需要对不符合要求的单元进行剔除。不符合的单元类型以及剔除操作方式为：\n任何透明度低于指定阈值的高斯单元。在每次致密化(即每隔100步优化)后执行剔除操作 靠近相机前的3D高斯单元，该类型单元聚集会导致的floater瑕疵现象。具体操作为：在每3000次优化迭代后将所有高斯单元设置为接近于透明，再重新进行3D高斯单元透明度优化。由于接近相机的3D高斯单元的透明度在后续迭代中更新较少，会转化为第一种类型的不合格单元，在后续的透明阈值过滤中被剔除。 在3D空间中尺寸过大，或其2D投影尺寸过大的3D高斯单元直接周期性被剔除 整个优化计算流程如下所示：\n3.4、光栅化渲染 针对现有基于点云的alpha-blending渲染算法中需要固定3D高斯单元数目，以及逐像素不透明度排序导致效率低下问题，提出了基于分片的3D高斯单元光栅化渲染，用于近似基于点云的不透明度融合渲染。具体步骤包括：\n3.4.1、基于视锥的剔除 剔除视锥外的3D高斯单元。具体的，只保留位于视锥内99%体积的3D高斯单元。此外，太靠近裁剪面和太远离远裁剪面的高斯单元的2D投影计算不稳定，也需要进行剔除。\n3.4.2、逐tile(分片)排序和渲染 基于分片的渲染示意图如下所示：\n其具体步骤分为：\n第一步：将投影屏幕切分为16x16的分片，并计算每个3D高斯单元的2D投影椭圆单元所覆盖的分片的个数以及索引号\n第二步：组合3D高斯单元在相机视图空间的深度值和其覆盖的分片索引号为该3D高斯单元的全局索引，具体的，使用64bit的变量描述，其低32bit编码深度值，高32bit编码分片索引。全局索引中包含深度值描述了3D高斯单元在空间中离相机的距离，而覆盖的分片数量则描述了3D高斯单元对渲染图像颜色的贡献程度。\n第三步：基于全局索引对所有的高斯单元进行排序后，再构造逐分片的列表，存储了其2D投影覆盖该分片的，经过depth排序的3D高斯单元序列。\n第四步：为每个分片分配一个CUDA线程块(thread block)，并提前将第三步中的高斯单元序列存储到线程块的局部共享存储空间。为分片中每个像素分配一个线程thread，对该分片的3D高斯排序单元由近到远遍历(相对相机位置)，计算累积颜色和不透明度值。\n第五步：对每个像素，如果第四步中累积的不透明度大于指定阈值，则终止该像素线程的计算。每隔指定时间间隔，查询该分片中所有线程的终止状态。如果所有线程都终止，则结束当前分片的计算。\n第六步：在反向梯度计算过程中，需要记录参与融合计算每个像素颜色的所有3D高斯单元在该像素位置处投影点的属性值，从而对参与计算的3D高斯单元属性参数进行更新。由于传输方程中远处点依赖近处点不透明度信息(相对相机位置)，为了方便梯度计算(链式法则从最外围的复合函数开始)，需要从远到近(相对相机位置)进行遍历计算。可直接利用第四步中已经构建的由近到远的排序列表反向即时计算即可，从而避免为每个像素预先存储投影点排序列表。\n第七步：从分片中最远的3D高斯单元逐步向较近的高斯单元遍历。针对每个像素，只有当前遍历时刻的高斯单元(存储在该分片维护的高斯单元排序列表中，第四步)离相机位置小于其自身最远的高斯单元(存储在该像素维护的高斯单元排序列表中，第六步)，才进行该像素的覆盖计算(是否在当前遍历的高斯单元投影中)，并计算梯度更新该高斯单元。通过存储第四步中的累积不透明度，并除以当前时刻的投影点的不透明度，可得从当前点到最近点的累积不透明度，用于不透明度的反向梯度计算(需要用到近处的不透明累积信息)。\n基于分片排序的渲染方法无需逐像素的排序渲染，是alpha-blending融合渲染的一种近似。当3D高斯单元的2D投影与像素尺寸相当时，这种近似所带来的误差可以忽略不计。此外，由于无需限制需要参与梯度更新的3D高斯单元，因此可以表达较复杂和较大纵深的场景，并且无需针对不同场景进行超惨调节(e.g., 参与梯度计算3D高斯单元个数)\n4、其它优化细节 4.1、Warm-up优化 为了改善优化的稳定性，初期阶段在1/4低分辨率图像上进行warm-up优化。在250次以及500次迭代时刻，在分别提高分辨率一倍。\n4.2、SH渐进优化 由于SH系数的优化对视线角度比较敏感。初期较大误差的视线角度可能导致无法获得较好的SH优化结果。通过在初期只优化SH0系数，后续每隔1000步迭代，分别增加高阶SH系数参与优化，提升优化稳定性\n","permalink":"https://soaroc.github.io/blogs/nerf/","summary":"针对NeRF原论文相关细节的介绍.","title":"NeRF"}]